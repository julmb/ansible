- name: key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/debian/gpg
    dest: /etc/apt/keyrings/docker.asc
  when: ansible_os_family == "Debian"
- name: repository
  ansible.builtin.apt_repository:
    filename: docker
    repo: deb [signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable
  when: ansible_os_family == "Debian"
- name: package
  ansible.builtin.apt: { name: docker-ce }
  when: ansible_os_family == "Debian"
- name: service
  ansible.builtin.service: { name: docker, state: started }
  when: ansible_os_family != "Windows"
- name: feature
  ansible.windows.win_feature: { name: Containers }
  register: feature
  when: ansible_os_family == "Windows"
- name: reboot
  ansible.windows.win_reboot:
  when: ansible_os_family == "Windows" and feature.reboot_required
- name: package
  win_chocolatey: { name: docker-engine }
  register: package
  when: ansible_os_family == "Windows"
- name: reboot
  ansible.windows.win_reboot:
  when: ansible_os_family == "Windows" and package.rc == 3010
- name: service
  ansible.windows.win_service: { name: docker, state: started }
  when: ansible_os_family == "Windows"

- name: exceptions
  ansible.builtin.import_role: { name: services/nftables }
  vars: { configuration: "{{ lookup('template', 'exceptions.conf') }}" }
  when: ansible_os_family != "Windows" and exceptions is defined

- name: configuration
  ansible.builtin.template: { src: daemon.json, dest: "{{ path[ansible_os_family] }}" }
  vars: { path: { Debian: /etc/docker/, Windows: /ProgramData/docker/config/ } }
  notify: [restart docker debian, restart docker windows]

- name: flush handlers
  ansible.builtin.meta: flush_handlers
