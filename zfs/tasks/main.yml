- name: package
  ansible.builtin.apt: { pkg: zfsutils-linux }
- name: configuration
  ansible.builtin.template: { src: zfs.conf, dest: /etc/modprobe.d/ }
- name: kernel module
  community.general.modprobe: { name: zfs }
- name: pools
  zpool:
    name: "{{ item.key }}"
    vdevs: "{{ item.value.vdevs }}"
    properties: "{{ item.value.properties | default(omit) }}"
  loop: "{{ zfs.pools | dict2items }}"
- name: datasets
  community.general.zfs:
    name: "{{ item.key }}"
    state: present
    extra_zfs_properties: "{{ item.value | default(omit, true) }}"
  loop: "{{ zfs.datasets | dict2items }}"
- name: systemd units scrub
  ansible.builtin.copy: { src: "{{ item }}", dest: /etc/systemd/system/ }
  loop: [zpool-scrub@.service, zpool-scrub@.timer]
  notify: reload systemd
- name: timer scrub
  ansible.builtin.systemd:
    name: zpool-scrub@{{ item.key }}.timer
    enabled: "{{ enabled }}"
    state: "{{ 'started' if enabled else 'stopped' }}"
  vars: { enabled: "{{ item.value.scrub | default(false) }}" }
  loop: "{{ zfs.pools | dict2items }}"
- name: systemd units trim
  ansible.builtin.copy: { src: "{{ item }}", dest: /etc/systemd/system/ }
  loop: [zpool-trim@.service, zpool-trim@.timer]
  notify: reload systemd
- name: timer trim
  ansible.builtin.systemd:
    name: zpool-trim@{{ item.key }}.timer
    enabled: "{{ enabled }}"
    state: "{{ 'started' if enabled else 'stopped' }}"
  vars: { enabled: "{{ item.value.trim | default(false) }}" }
  loop: "{{ zfs.pools | dict2items }}"
