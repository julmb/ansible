- name: devices
  ansible.builtin.include_tasks: device.yml
  loop: "{{ devices | dict2items }}"
  loop_control: { loop_var: device, label: "{{ device.key }}" }
- name: swap
  ansible.builtin.command: swapon /dev/{{ item }}
  register: result
  failed_when: result.rc != 0 and 'Device or resource busy' not in result.stderr
  changed_when: result.rc == 0
  loop: "{{ swap }}"
- name: mount
  ansible.builtin.command: mount --onlyonce --mkdir /dev/{{ item.key }} /mnt{{ item.value }}
  register: result
  failed_when: result.rc != 0 and 'filesystem already mounted' not in result.stderr
  changed_when: result.rc == 0
  loop: "{{ mount | dict2items }}"
  loop_control: { label: "{{ item.key }}" }

- name: pacstrap
  ansible.builtin.shell:
    cmd: pacstrap -K /mnt {{ packages | join(' ') }} 1> /dev/tty1 2>&1
    creates: /mnt/etc/arch-release

- name: generate fstab
  ansible.builtin.command: genfstab -U /mnt
  register: result
  changed_when: false
- name: write fstab
  ansible.builtin.copy: { content: "{{ result.stdout }}", dest: /mnt/etc/fstab }

# TODO: this might not be needed with the DNS server
- name: host name
  ansible.builtin.template: { src: hostname, dest: /mnt/etc/ }

- name: time zone
  ansible.builtin.file:
    src: /mnt/usr/share/zoneinfo/{{ setup.timezone }}
    dest: /etc/localtime
    state: link
- name: hardware clock
  ansible.builtin.command:
    cmd: arch-chroot /mnt hwclock --utc --systohc
    creates: /mnt/etc/adjtime

- name: locale.conf
  ansible.builtin.template: { src: locale.conf, dest: /mnt/etc/ }
- name: locale.gen
  ansible.builtin.template: { src: locale.gen, dest: /mnt/etc/ }
- name: locale-gen
  ansible.builtin.command:
    cmd: arch-chroot /mnt locale-gen
    creates: /mnt/usr/lib/locale/locale-archive

- name: bootctl
  ansible.builtin.command:
    cmd: arch-chroot /mnt bootctl install
    creates: /mnt/boot/EFI/systemd/systemd-bootx64.efi
- name: loader.conf
  ansible.builtin.template: { src: loader.conf, dest: /mnt/boot/loader/ }
- name: arch.conf
  ansible.builtin.template: { src: arch.conf, dest: /mnt/boot/loader/entries/ }

- name: user
  ansible.builtin.command:
    cmd: arch-chroot /mnt useradd --create-home --password {{ password }} {{ user_name }}
    creates: /home/{{ user_name }}
  vars:
    password: "{{ user_password | password_hash('sha512', salt) }}"
    salt: "{{ '%016x' % (2 ** 64) | random(seed = inventory_hostname + ':' + user_name) }}"
- name: sudoers
  ansible.builtin.template: { src: sudoers, dest: /mnt/etc/sudoers.d/ }

- name: unmount
  ansible.builtin.command: umount --recursive /mnt
  register: result
  failed_when: result.rc != 0 and 'not mounted' not in result.stderr
  changed_when: result.rc == 0

- name: reboot
  ansible.builtin.reboot:
