- name: package
  ansible.builtin.apt: { pkg: zfsutils-linux }
- name: configuration
  ansible.builtin.template: { src: zfs.conf, dest: /etc/modprobe.d/ }
- name: kernel module
  community.general.modprobe: { name: zfs }

- name: pools
  zpool:
    name: "{{ item.key }}"
    hard: "{{ item.value.hard | default(omit) }}"
    force: "{{ item.value.force | default(omit) }}"
    vdevs: "{{ item.value.vdevs }}"
    properties: "{{ item.value.properties | default(omit) }}"
  loop: "{{ pools | dict2items }}"
- name: datasets
  community.general.zfs:
    name: "{{ item.key }}"
    state: present
    extra_zfs_properties: "{{ item.value | default(omit, true) }}"
  loop: "{{ datasets | dict2items }}"

- name: fix bug in zed slack notification function
  ansible.builtin.lineinfile:
    path: /etc/zfs/zed.d/zed-functions.sh
    search_string: "    msg_json=\"$(printf '{\"text\": \"*%s*\\n%s\"}' \"${subject}\" \"${msg_body}\" )\""
    line: "    msg_json=\"$(printf '{\"text\": \"*%s*\\\\n%s\"}' \"${subject}\" \"${msg_body}\" )\""

- name: timer scrub
  ansible.builtin.include_role: { name: system/timer }
  vars:
    service: zpool-scrub@
    description: zpool scrub on %i
    command: sh -c "zpool scrub -w %i && zpool status %i"
    time: "{{ timers.scrub | default('*-*-01 00:00:00') }}"
    variance: 1h
    persistent: yes
- name: timer scrub state
  ansible.builtin.systemd:
    name: zpool-scrub@{{ item.key }}.timer
    enabled: "{{ enabled }}"
    state: "{{ 'started' if enabled else 'stopped' }}"
    daemon_reload: yes
  vars: { enabled: "{{ item.value.scrub | default(false) }}" }
  loop: "{{ pools | dict2items }}"

- name: timer trim
  ansible.builtin.include_role: { name: system/timer }
  vars:
    service: zpool-trim@
    description: zpool trim on %i
    command: zpool trim -w %i
    time: "{{ timers.trim | default('*-*-15 00:00:00') }}"
    variance: 1h
    persistent: yes
- name: timer trim state
  ansible.builtin.systemd:
    name: zpool-trim@{{ item.key }}.timer
    enabled: "{{ enabled }}"
    state: "{{ 'started' if enabled else 'stopped' }}"
    daemon_reload: yes
  vars: { enabled: "{{ item.value.trim | default(false) }}" }
  loop: "{{ pools | dict2items }}"
